@page
@model Business_Data.Pages.IndexModel
@using System.Text.Json
@{
   
    Layout = "~/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = "Empresas";

    // 🔹 Gráfica: Empresas por Comunidad Autónoma
    var comunidadesJson = JsonSerializer.Serialize(Model.EmpresasPorComunidad.Keys);
    var cantidadesJson = JsonSerializer.Serialize(Model.EmpresasPorComunidad.Values);

    // 🔹 Gráfica: Empresas por Sector
    var sectoresJson = JsonSerializer.Serialize(Model.EmpresasPorSector.Keys);
    var cantidadesSectorJson = JsonSerializer.Serialize(Model.EmpresasPorSector.Values);

    // 🔹 Gráfica: Empresas por Tipo
    var tipoJson = JsonSerializer.Serialize(Model.EmpresasPorTipo.Keys);
    var cantidadesTipoJson = JsonSerializer.Serialize(Model.EmpresasPorTipo.Values);

    // 🔹 Gráfica: Empresas por Estado
    var estadoJson = JsonSerializer.Serialize(Model.EmpresasPorEstado.Keys);
    var cantidadesEstadoJson = JsonSerializer.Serialize(Model.EmpresasPorEstado.Values);

    var provinciasJson = JsonSerializer.Serialize(Model.EmpresasPorProvincia.Keys);
    var cantidadesProvinciaJson = JsonSerializer.Serialize(Model.EmpresasPorProvincia.Values);

    var ciudadesJson = JsonSerializer.Serialize(Model.EmpresasPorCiudad.Keys);
    var cantidadesCiudadJson = JsonSerializer.Serialize(Model.EmpresasPorCiudad.Values);

    var nombresEmpresasJson = JsonSerializer.Serialize(Model.EmpresasNombres);
    var capitalesEmpresasJson = JsonSerializer.Serialize(Model.EmpresasCapital);


    var trabajadoresJson = JsonSerializer.Serialize(Model.EmpresasPorTrabajadoresRango.Keys);
    var cantidadesTrabajadoresJson = JsonSerializer.Serialize(Model.EmpresasPorTrabajadoresRango.Values);
}

<!-- Bloque de estilos para el diseño de las gráficas y el formulario -->


<!-- Contenedor del formulario de filtros -->
<div id="filter-wrapper">
    <div id="filter-header" onclick="toggleFilter()">
        <h3>Filtros</h3>
        <span id="filter-icon">▼</span>
    </div>
    <div id="filter-content">
        <!-- Formulario de Filtros -->
        <form method="get" class="form-grid">
            <div>
                <label for="Nombre">Nombre:</label>
                <input type="text" id="Nombre" name="Filtro.Nombre" value="@Model.Filtro.Nombre" />
            </div>
            <div>
                <label for="Tipo">Tipo:</label>
                <select id="Tipo" name="Filtro.Tipo">
                    <option value="">Todos</option>
                    @foreach (var item in Model.Tipos)
                    {
                        <option value="@item" selected="@(Model.Filtro.Tipo == item ? "selected" : null)">@item</option>
                    }
                </select>
            </div>
            <div>
                <label for="ComunidadAutonoma">Comunidad Autónoma:</label>
                <select id="ComunidadAutonoma" name="Filtro.ComunidadAutonoma">
                    <option value="">Todos</option>
                    @foreach (var item in Model.Comunidades)
                    {
                        <option value="@item" selected="@(Model.Filtro.ComunidadAutonoma == item ? "selected" : null)">@item</option>
                    }
                </select>
            </div>
            <div>
                <label for="Provincia">Provincia:</label>
                <select id="Provincia" name="Filtro.Provincia">
                    <option value="">Todos</option>
                    @foreach (var item in Model.Provincias)
                    {
                        <option value="@item" selected="@(Model.Filtro.Provincia == item ? "selected" : null)">@item</option>
                    }
                </select>
            </div>
            <div>
                <label for="Ciudad">Ciudad:</label>
                <input type="text" id="Ciudad" name="Filtro.Ciudad" value="@Model.Filtro.Ciudad" />
            </div>
            <div>
                <label for="Direccion">Dirección:</label>
                <input type="text" id="Direccion" name="Filtro.Direccion" value="@Model.Filtro.Direccion" />
            </div>
            <div>
                <label for="CodigoPostal">Código Postal:</label>
                <input type="text" id="CodigoPostal" name="Filtro.CodigoPostal" value="@Model.Filtro.CodigoPostal" />
            </div>
            <div>
                <label for="Capital">Capital mínimo:</label>
                <input type="number" id="Capital" name="Filtro.Capital" step="0.01" value="@(Model.Filtro.Capital?.ToString() ?? string.Empty)" />
            </div>
            <div>
                <label for="Beneficios">Beneficios mínimos:</label>
                <input type="number" id="Beneficios" name="Filtro.Beneficios" step="0.01" value="@(Model.Filtro.Beneficios?.ToString() ?? string.Empty)" />
            </div>
            <div>
                <label for="Perdidas">Pérdidas mínimas:</label>
                <input type="number" id="Perdidas" name="Filtro.Perdidas" step="0.01" value="@(Model.Filtro.Perdidas?.ToString() ?? string.Empty)" />
            </div>
            <div>
                <label for="NumeroTrabajadores">Número de trabajadores mínimo:</label>
                <input type="number" id="NumeroTrabajadores" name="Filtro.NumeroTrabajadores" value="@(Model.Filtro.NumeroTrabajadores?.ToString() ?? string.Empty)" />
            </div>
            <div>
                <label for="Sector">Sector:</label>
                <select id="Sector" name="Filtro.Sector">
                    <option value="">Todos</option>
                    @foreach (var item in Model.Sectores)
                    {
                        <option value="@item" selected="@(Model.Filtro.Sector == item ? "selected" : null)">@item</option>
                    }
                </select>
            </div>
            <div>
                <label for="Subsector">Subsector:</label>
                <select id="Subsector" name="Filtro.Subsector">
                    <option value="">Todos</option>
                    @foreach (var item in Model.Subsectors)
                    {
                        <option value="@item" selected="@(Model.Filtro.Subsector == item ? "selected" : null)">@item</option>
                    }
                </select>
            </div>
            <div>
                <label for="FechaCreacion">Fecha de Creación:</label>
                <input type="date" id="FechaCreacion" name="Filtro.FechaCreacion" value='@(Model.Filtro.FechaCreacion?.ToString("yyyy-MM-dd") ?? string.Empty)' />
            </div>
            <div>
                <label for="Estado">Estado:</label>
                <select id="Estado" name="Filtro.Estado">
                    <option value="">Todos</option>
                    @foreach (var item in Model.Estados)
                    {
                        <option value="@item" selected="@(Model.Filtro.Estado == item ? "selected" : null)">@item</option>
                    }
                </select>
            </div>
            <button type="submit">Filtrar</button>
        </form>
    </div>
</div>




<!-- JavaScript para alternar el formulario de filtros -->
<script>
    function toggleFilter() {
        var wrapper = document.getElementById('filter-wrapper');
        var icon = document.getElementById('filter-icon');
        wrapper.classList.toggle('open');
        icon.textContent = wrapper.classList.contains('open') ? '▲' : '▼';
    }
</script>



<!-- Tabla de Resultados -->
<div class="table-container" style="margin-top:20px;">
    <table>
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Tipo</th>
                <th>Comunidad Autónoma</th>
                <th>Provincia</th>
                <th>Ciudad</th>
                <th>Dirección</th>
                <th>Código Postal</th>
                <th>Capital</th>
                <th>Beneficios</th>
                <th>Pérdidas</th>
                <th>Número Trabajadores</th>
                <th>Sector</th>
                <th>Subsector</th>
                <th>Fecha Creación</th>
                <th>Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var empresa in Model.Empresas)
            {
                <tr ondblclick="irANoticias('@empresa.Nombre')">
                    <td>@empresa.Nombre</td>
                    <td>@empresa.Tipo</td>
                    <td>@empresa.ComunidadAutonoma</td>
                    <td>@empresa.Provincia</td>
                    <td>@empresa.Ciudad</td>
                    <td>@empresa.Direccion</td>
                    <td>@empresa.CodigoPostal</td>
                    <td>@empresa.Capital</td>
                    <td>@empresa.Beneficios</td>
                    <td>@empresa.Perdidas</td>
                    <td>@empresa.NumeroTrabajadores</td>
                    <td>@empresa.Sector</td>
                    <td>@empresa.Subsector</td>
                    <td>@empresa.FechaCreacion.ToString("dd/MM/yyyy")</td>
                    <td>@empresa.Estado</td>
                </tr>
            }
        </tbody>

    </table>

    <script>
    function irANoticias(nombreEmpresa) {
        const nombreCodificado = encodeURIComponent(nombreEmpresa);
        window.location.href = `/Noticias?nombre=${nombreCodificado}`;
    }
</script>

   
</div>
<!-- Paginación -->
<div style="margin-top:10px; text-align:center;">
    <form method="get">
        @* Mantener filtros en la paginación *@
        @foreach (var key in Request.Query.Keys.Where(k => k != "pagina"))
        {
            <input type="hidden" name="@key" value="@Request.Query[key]" />
        }

        <button type="submit" name="pagina" value="@(Model.PaginaActual - 1)" @(Model.PaginaActual <= 1 ? "disabled" : "")>Anterior</button>
        Página @Model.PaginaActual de @Model.TotalPaginas
        <button type="submit" name="pagina" value="@(Model.PaginaActual + 1)" @(Model.PaginaActual >= Model.TotalPaginas ? "disabled" : "")>Siguiente</button>
    </form>
</div>

<!-- Contenedor de gráficas en formato 2x2 con diseño mejorado -->

<div class="chart-grid">
    <div class="chart-box">
        <h2>Empresas por Comunidad Autónoma</h2>
        <canvas id="graficoComunidad"></canvas>
        <div class="download-buttons">
            <button onclick="descargarImagen('graficoComunidad', 'png')">Descargar PNG</button>
        </div>
    </div>
    <div class="chart-box">
        <h2>Empresas por Sector</h2>
        <canvas id="graficoSector"></canvas>
        <div class="download-buttons">
            <button onclick="descargarImagen('graficoSector', 'png')">Descargar PNG</button>
        </div>
    </div>
    <div class="chart-box">
        <h2>Empresas por Tipo</h2>
        <canvas id="graficoTipo"></canvas>
        <div class="download-buttons">
            <button onclick="descargarImagen('graficoTipo', 'png')">Descargar PNG</button>
        </div>
    </div>
    <div class="chart-box">
        <h2>Empresas por Estado</h2>
        <canvas id="graficoEstado"></canvas>
        <div class="download-buttons">
            <button onclick="descargarImagen('graficoEstado', 'png')">Descargar PNG</button>
        </div>
    </div>
    <!-- Nuevas gráficas -->
    <div class="chart-box">
        <h2>Empresas por Provincia</h2>
        <canvas id="graficoProvincia"></canvas>
        <div class="download-buttons">
            <button onclick="descargarImagen('graficoProvincia', 'png')">Descargar PNG</button>
        </div>
    </div>
    <div class="chart-box">
        <h2>Empresas por Ciudad</h2>
        <canvas id="graficoCiudad"></canvas>
        <div class="download-buttons">
            <button onclick="descargarImagen('graficoCiudad', 'png')">Descargar PNG</button>
        </div>
    </div>
    <div class="chart-box">
        <h2>Empresas por Capital</h2>
        <canvas id="graficoCapital"></canvas>
        <div class="download-buttons">
            <button onclick="descargarImagen('graficoCapital', 'png')">Descargar PNG</button>
        </div>
    </div>
    <div class="chart-box">
        <h2>Empresas por Trabajadores</h2>
        <canvas id="graficoTrabajadores"></canvas>
        <div class="download-buttons">
            <button onclick="descargarImagen('graficoTrabajadores', 'png')">Descargar PNG</button>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    function descargarImagen(idCanvas, formato) {
        const canvas = document.getElementById(idCanvas);
        const link = document.createElement('a');

        const formatos = {
            png: 'image/png',
            jpeg: 'image/jpeg'
        };

        if (!formatos[formato]) {
            alert('Formato no soportado');
            return;
        }

        link.href = canvas.toDataURL(formatos[formato]);
        link.download = idCanvas + '.' + formato;
        link.click();
    }
</script>


<script>
    // Gráfica: Empresas por Comunidad Autónoma
    const labelsComunidad = @Html.Raw(comunidadesJson);
    const dataComunidad = @Html.Raw(cantidadesJson);
    const ctxComunidad = document.getElementById('graficoComunidad').getContext('2d');
    new Chart(ctxComunidad, {
        type: 'bar',
        data: {
            labels: labelsComunidad,
            datasets: [{
                label: 'Número de Empresas',
                data: dataComunidad,
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false },
                tooltip: { enabled: true }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    precision: 0,
                    title: { display: true, text: 'Cantidad' }
                },
                x: {
                    title: { display: true, text: 'Comunidad Autónoma' }
                }
            }
        }
    });

    // Gráfica: Empresas por Sector
    const labelsSector = @Html.Raw(sectoresJson);
    const dataSector = @Html.Raw(cantidadesSectorJson);
    const ctxSector = document.getElementById('graficoSector').getContext('2d');
    new Chart(ctxSector, {
        type: 'pie',
        data: {
            labels: labelsSector,
            datasets: [{
                label: 'Número de Empresas',
                data: dataSector,
                backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],
                borderColor: 'rgba(255, 255, 255, 0.3)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                tooltip: { enabled: true }
            }
        }
    });

    // Gráfica: Empresas por Tipo
    const labelsTipo = @Html.Raw(tipoJson);
    const dataTipo = @Html.Raw(cantidadesTipoJson);
    const ctxTipo = document.getElementById('graficoTipo').getContext('2d');
    new Chart(ctxTipo, {
        type: 'bar',
        data: {
            labels: labelsTipo,
            datasets: [{
                label: 'Número de Empresas',
                data: dataTipo,
                backgroundColor: 'rgba(153, 102, 255, 0.6)',
                borderColor: 'rgba(153, 102, 255, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { display: false },
                tooltip: { enabled: true }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    precision: 0,
                    title: { display: true, text: 'Cantidad' }
                },
                x: {
                    title: { display: true, text: 'Tipo de Empresa' }
                }
            }
        }
    });

    // Gráfica: Empresas por Estado
    const labelsEstado = @Html.Raw(estadoJson);
    const dataEstado = @Html.Raw(cantidadesEstadoJson);
    const ctxEstado = document.getElementById('graficoEstado').getContext('2d');
    new Chart(ctxEstado, {
        type: 'pie',
        data: {
            labels: labelsEstado,
            datasets: [{
                label: 'Número de Empresas',
                data: dataEstado,
                backgroundColor: ['#FF5733', '#C70039', '#900C3F', '#581845'],
                borderColor: 'rgba(255, 255, 255, 0.3)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { position: 'top' },
                tooltip: { enabled: true }
            }
        }
    });
        // Empresas por Provincia
    new Chart(document.getElementById('graficoProvincia'), {
        type: 'bar',
        data: {
            labels: @Html.Raw(provinciasJson),
            datasets: [{
                label: 'Empresas',
                data: @Html.Raw(cantidadesProvinciaJson),
                backgroundColor: 'rgba(255, 159, 64, 0.6)',
                borderColor: 'rgba(255, 159, 64, 1)',
                borderWidth: 1
            }]
        },
        options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });

    // Empresas por Ciudad
    new Chart(document.getElementById('graficoCiudad'), {
        type: 'bar',
        data: {
            labels: @Html.Raw(ciudadesJson),
            datasets: [{
                label: 'Empresas',
                data: @Html.Raw(cantidadesCiudadJson),
                backgroundColor: 'rgba(54, 162, 235, 0.6)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });
    // Gráfica: Top 15 Empresas por Capital
    var nombresEmpresas = @Html.Raw(Json.Serialize(Model.EmpresasNombres));
    var capitalesEmpresas = @Html.Raw(Json.Serialize(Model.EmpresasCapital));
    new Chart(document.getElementById('graficoCapital'), {
        type: 'bar',
        data: {
            labels: nombresEmpresas,
            datasets: [{
                label: 'Capital (€)',
                data: capitalesEmpresas,
                backgroundColor: 'rgba(75, 192, 192, 0.6)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { display: false },
                title: {
                    display: true,
                    text: 'Top 15 Empresas por Capital'
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Capital (€)'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: 'Empresas'
                    }
                }
            }
        }
    });


    // Empresas por Trabajadores
    new Chart(document.getElementById('graficoTrabajadores'), {
        type: 'bar',
        data: {
            labels: @Html.Raw(trabajadoresJson),
            datasets: [{
                label: 'Empresas',
                data: @Html.Raw(cantidadesTrabajadoresJson),
                backgroundColor: 'rgba(255, 206, 86, 0.6)',
                borderColor: 'rgba(255, 206, 86, 1)',
                borderWidth: 1
            }]
        },
        options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });

</script>
